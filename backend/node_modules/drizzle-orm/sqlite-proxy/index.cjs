"use strict";var s=require("../logger-04bad527.cjs"),e=require("../session-b6939bab.cjs"),t=require("../index-59b7992d.cjs"),r=require("../utils-9d882195.cjs");require("../query-builder-2f2e8229.cjs");class i extends e.SQLiteSession{constructor(e,t,r={}){super(t),this.client=e,this.logger=r.logger??new s.NoopLogger}prepareQuery(s,e){return new n(this.client,s.sql,s.params,this.logger,e)}async transaction(s,e){const r=new a(this.dialect,this);await this.run(t.sql.raw("begin"+(e?.behavior?" "+e.behavior:"")));try{const e=await s(r);return await this.run(t.sql`commit`),e}catch(s){throw await this.run(t.sql`rollback`),s}}}class a extends e.SQLiteTransaction{async transaction(s){const e=`sp${this.nestedIndex}`,r=new a(this.dialect,this.session,this.nestedIndex+1);await this.session.run(t.sql.raw(`savepoint ${e}`));try{const i=await s(r);return await this.session.run(t.sql.raw(`release savepoint ${e}`)),i}catch(s){throw await this.session.run(t.sql.raw(`rollback to savepoint ${e}`)),s}}}class n extends e.PreparedQuery{constructor(s,e,t,r,i){super(),this.client=s,this.queryString=e,this.params=t,this.logger=r,this.fields=i}async run(s){const e=t.fillPlaceholders(this.params,s??{});return this.logger.logQuery(this.queryString,e),await this.client(this.queryString,e,"run")}async all(s){const{fields:e,queryString:i,logger:a,joinsNotNullableMap:n}=this,l=t.fillPlaceholders(this.params,s??{});a.logQuery(i,l);const o=this.client(i,l,"all");return e?o.then((s=>s.rows.map((s=>r.mapResultRow(e,s,n))))):this.client(i,l,"all").then((({rows:s})=>s))}async get(s){const{fields:e,queryString:i,logger:a,joinsNotNullableMap:n}=this,l=t.fillPlaceholders(this.params,s??{});a.logQuery(i,l);const o=await this.client(i,l,"get");return e?void 0===o.rows?r.mapResultRow(e,[],n):r.mapResultRow(e,o.rows,n):o.rows}async values(s){const e=t.fillPlaceholders(this.params,s??{});this.logger.logQuery(this.queryString,e);return(await this.client(this.queryString,e,"values")).rows}}exports.PreparedQuery=n,exports.SQLiteProxyTransaction=a,exports.SQLiteRemoteSession=i,exports.drizzle=function(t,r={}){const a=new e.SQLiteAsyncDialect;let n;!0===r.logger?n=new s.DefaultLogger:!1!==r.logger&&(n=r.logger);const l=new i(t,a,{logger:n});return new e.BaseSQLiteDatabase(a,l)};
//# sourceMappingURL=index.cjs.map
