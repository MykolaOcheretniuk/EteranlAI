"use strict";var e=require("../logger-04bad527.cjs"),t=require("../session-b6939bab.cjs"),s=require("../index-59b7992d.cjs"),r=require("../utils-9d882195.cjs");require("../query-builder-2f2e8229.cjs");class i extends t.SQLiteSession{constructor(t,s,r,i){super(s),this.client=t,this.options=r,this.tx=i,this.logger=r.logger??new e.NoopLogger}prepareQuery(e,t){return new a(this.client,e.sql,e.params,this.logger,t,this.tx)}batch(e){const t=e.map((e=>{const t=this.dialect.sqlToQuery(e);return{sql:t.sql,args:t.params}}));return this.client.batch(t)}async transaction(e,t){const s=await this.client.transaction(),r=new i(this.client,this.dialect,this.options,s),a=new n(this.dialect,r);try{const t=await e(a);return await s.commit(),t}catch(e){throw await s.rollback(),e}}}class n extends t.SQLiteTransaction{async transaction(e){const t=`sp${this.nestedIndex}`,r=new n(this.dialect,this.session,this.nestedIndex+1);await this.session.run(s.sql.raw(`savepoint ${t}`));try{const i=await e(r);return await this.session.run(s.sql.raw(`release savepoint ${t}`)),i}catch(e){throw await this.session.run(s.sql.raw(`rollback to savepoint ${t}`)),e}}}class a extends t.PreparedQuery{constructor(e,t,s,r,i,n){super(),this.client=e,this.queryString=t,this.params=s,this.logger=r,this.fields=i,this.tx=n}run(e){const t=s.fillPlaceholders(this.params,e??{});this.logger.logQuery(this.queryString,t);const r={sql:this.queryString,args:t};return this.tx?this.tx.execute(r):this.client.execute(r)}all(e){const{fields:t,joinsNotNullableMap:i,logger:n,queryString:a,tx:o,client:l}=this;if(t){return this.values(e).then((e=>e.map((e=>r.mapResultRow(t,Array.prototype.slice.call(e).map((e=>function(e){if(e instanceof ArrayBuffer){if("undefined"!=typeof Buffer)return e instanceof Buffer?e:Buffer.from(e);if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(e);throw new Error("TextDecoder is not available. Please provide either Buffer or TextDecoder polyfill.")}return e}(e))),i)))))}const c=s.fillPlaceholders(this.params,e??{});n.logQuery(a,c);const u={sql:a,args:c};return(o?o.execute(u):l.execute(u)).then((({rows:e})=>e.map((e=>{return t=e,Object.keys(t).reduce(((e,s)=>(Object.prototype.propertyIsEnumerable.call(t,s)&&(e[s]=t[s]),e)),{});var t}))))}get(e){return this.all(e).then((e=>e[0]))}values(e){const t=s.fillPlaceholders(this.params,e??{});this.logger.logQuery(this.queryString,t);const r={sql:this.queryString,args:t};return(this.tx?this.tx.execute(r):this.client.execute(r)).then((({rows:e})=>e))}}exports.LibSQLSession=i,exports.LibSQLTransaction=n,exports.PreparedQuery=a,exports.drizzle=function(s,r={}){const n=new t.SQLiteAsyncDialect;let a;!0===r.logger?a=new e.DefaultLogger:!1!==r.logger&&(a=r.logger);const o=new i(s,n,{logger:a},void 0);return new t.BaseSQLiteDatabase(n,o)};
//# sourceMappingURL=index.cjs.map
