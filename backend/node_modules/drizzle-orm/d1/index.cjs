"use strict";var s=require("../logger-04bad527.cjs"),e=require("../session-b6939bab.cjs"),t=require("../index-59b7992d.cjs"),r=require("../utils-9d882195.cjs");require("../query-builder-2f2e8229.cjs");class i extends e.SQLiteSession{constructor(e,t,r={}){super(t),this.client=e,this.logger=r.logger??new s.NoopLogger}prepareQuery(s,e){const t=this.client.prepare(s.sql);return new a(t,s.sql,s.params,this.logger,e)}async transaction(s,e){const r=new n(this.dialect,this);await this.run(t.sql.raw("begin"+(e?.behavior?" "+e.behavior:"")));try{const e=await s(r);return await this.run(t.sql`commit`),e}catch(s){throw await this.run(t.sql`rollback`),s}}}class n extends e.SQLiteTransaction{async transaction(s){const e=`sp${this.nestedIndex}`,r=new n(this.dialect,this.session,this.nestedIndex+1);await this.session.run(t.sql.raw(`savepoint ${e}`));try{const i=await s(r);return await this.session.run(t.sql.raw(`release savepoint ${e}`)),i}catch(s){throw await this.session.run(t.sql.raw(`rollback to savepoint ${e}`)),s}}}class a extends e.PreparedQuery{constructor(s,e,t,r,i){super(),this.stmt=s,this.queryString=e,this.params=t,this.logger=r,this.fields=i}run(s){const e=t.fillPlaceholders(this.params,s??{});return this.logger.logQuery(this.queryString,e),this.stmt.bind(...e).run()}all(s){const{fields:e,joinsNotNullableMap:i,queryString:n,logger:a,stmt:l}=this;if(e)return this.values(s).then((s=>s.map((s=>r.mapResultRow(e,s,i)))));const o=t.fillPlaceholders(this.params,s??{});return a.logQuery(n,o),l.bind(...o).all().then((({results:s})=>s))}get(s){return this.all(s).then((s=>s[0]))}values(s){const e=t.fillPlaceholders(this.params,s??{});return this.logger.logQuery(this.queryString,e),this.stmt.bind(...e).raw()}}exports.D1Transaction=n,exports.PreparedQuery=a,exports.SQLiteD1Session=i,exports.drizzle=function(t,r={}){const n=new e.SQLiteAsyncDialect;let a;!0===r.logger?a=new s.DefaultLogger:!1!==r.logger&&(a=r.logger);const l=new i(t,n,{logger:a});return new e.BaseSQLiteDatabase(n,l)};
//# sourceMappingURL=index.cjs.map
