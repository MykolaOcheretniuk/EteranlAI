import{N as s,D as t}from"../logger-2598bf05.mjs";import{S as r,a as e,P as i,B as n,c as a}from"../session-b977ce56.mjs";import{s as o,k as l}from"../index-b71998f1.mjs";import{m as h}from"../utils-e6870670.mjs";import"../query-builder-2fcde2f0.mjs";class u extends r{constructor(t,r,e={}){super(r),this.client=t,this.logger=e.logger??new s}prepareQuery(s,t){const r=this.client.prepare(s.sql);return new g(r,s.sql,s.params,this.logger,t)}async transaction(s,t){const r=new c(this.dialect,this);await this.run(o.raw("begin"+(t?.behavior?" "+t.behavior:"")));try{const t=await s(r);return await this.run(o`commit`),t}catch(s){throw await this.run(o`rollback`),s}}}class c extends e{async transaction(s){const t=`sp${this.nestedIndex}`,r=new c(this.dialect,this.session,this.nestedIndex+1);await this.session.run(o.raw(`savepoint ${t}`));try{const e=await s(r);return await this.session.run(o.raw(`release savepoint ${t}`)),e}catch(s){throw await this.session.run(o.raw(`rollback to savepoint ${t}`)),s}}}class g extends i{constructor(s,t,r,e,i){super(),this.stmt=s,this.queryString=t,this.params=r,this.logger=e,this.fields=i}run(s){const t=l(this.params,s??{});return this.logger.logQuery(this.queryString,t),this.stmt.bind(...t).run()}all(s){const{fields:t,joinsNotNullableMap:r,queryString:e,logger:i,stmt:n}=this;if(t)return this.values(s).then((s=>s.map((s=>h(t,s,r)))));const a=l(this.params,s??{});return i.logQuery(e,a),n.bind(...a).all().then((({results:s})=>s))}get(s){return this.all(s).then((s=>s[0]))}values(s){const t=l(this.params,s??{});return this.logger.logQuery(this.queryString,t),this.stmt.bind(...t).raw()}}function m(s,r={}){const e=new a;let i;!0===r.logger?i=new t:!1!==r.logger&&(i=r.logger);const o=new u(s,e,{logger:i});return new n(e,o)}export{c as D1Transaction,g as PreparedQuery,u as SQLiteD1Session,m as drizzle};
//# sourceMappingURL=index.mjs.map
