/// <reference types="@cloudflare/workers-types" />
export { D as DrizzleConfig, a as DrizzleD1Database, d as drizzle } from '../driver.d-c79defcd.js';
import { L as Logger } from '../logger.d-37185354.js';
import { y as Query } from '../column.d-8b137277.js';
import { S as SQLiteSession, f as SQLiteAsyncDialect, b as SelectedFieldsOrdered, c as SQLiteTransactionConfig, d as SQLiteTransaction, P as PreparedQuery$1, e as PreparedQueryConfig$1 } from '../db.d-fde890b4.js';
import '../select.types.d-c3e86d45.js';
import '../migrator.js';

interface SQLiteD1SessionOptions {
    logger?: Logger;
}
type PreparedQueryConfig = Omit<PreparedQueryConfig$1, 'statement' | 'run'>;
declare class SQLiteD1Session extends SQLiteSession<'async', D1Result> {
    private client;
    private logger;
    constructor(client: D1Database, dialect: SQLiteAsyncDialect, options?: SQLiteD1SessionOptions);
    prepareQuery(query: Query, fields?: SelectedFieldsOrdered): PreparedQuery;
    transaction<T>(transaction: (tx: D1Transaction) => T | Promise<T>, config?: SQLiteTransactionConfig): Promise<T>;
}
declare class D1Transaction extends SQLiteTransaction<'async', D1Result> {
    transaction<T>(transaction: (tx: D1Transaction) => Promise<T>): Promise<T>;
}
declare class PreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends PreparedQuery$1<{
    type: 'async';
    run: D1Result;
    all: T['all'];
    get: T['get'];
    values: T['values'];
}> {
    private stmt;
    private queryString;
    private params;
    private logger;
    private fields;
    constructor(stmt: D1PreparedStatement, queryString: string, params: unknown[], logger: Logger, fields: SelectedFieldsOrdered | undefined);
    run(placeholderValues?: Record<string, unknown>): Promise<D1Result>;
    all(placeholderValues?: Record<string, unknown>): Promise<T['all']>;
    get(placeholderValues?: Record<string, unknown>): Promise<T['get']>;
    values<T extends any[] = unknown[]>(placeholderValues?: Record<string, unknown>): Promise<T[]>;
}

export { D1Transaction, PreparedQuery, SQLiteD1Session, SQLiteD1SessionOptions };
