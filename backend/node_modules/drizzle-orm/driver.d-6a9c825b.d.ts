import { L as Logger } from './logger.d-37185354.js';
import { P as PreparedQueryConfig, a as PreparedQuery, S as SelectedFieldsOrdered, b as PgSession, c as PgDialect, d as PgTransactionConfig, e as PgTransaction, Q as QueryResultHKT, f as PgDatabase } from './db.d-266cc4bc.js';
import { RDSDataClient, ExecuteStatementCommandOutput } from '@aws-sdk/client-rds-data';
import { Q as QueryTypingsValue, y as Query, S as SQL } from './column.d-8b137277.js';

type AwsDataApiClient = RDSDataClient;
declare class AwsDataApiPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private typings;
    private options;
    private fields;
    private rawQuery;
    constructor(client: AwsDataApiClient, queryString: string, params: unknown[], typings: QueryTypingsValue[], options: AwsDataApiSessionOptions, fields: SelectedFieldsOrdered | undefined, 
    /** @internal */
    transactionId: string | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
}
interface AwsDataApiSessionOptions {
    logger?: Logger;
    database: string;
    resourceArn: string;
    secretArn: string;
}
declare class AwsDataApiSession extends PgSession<AwsDataApiPgQueryResultHKT> {
    private options;
    constructor(
    /** @internal */
    client: AwsDataApiClient, dialect: PgDialect, options: AwsDataApiSessionOptions, 
    /** @internal */
    transactionId: string | undefined);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectedFieldsOrdered | undefined, transactionId?: string): PreparedQuery<T>;
    execute<T>(query: SQL): Promise<T>;
    transaction<T>(transaction: (tx: AwsDataApiTransaction) => Promise<T>, config?: PgTransactionConfig | undefined): Promise<T>;
}
declare class AwsDataApiTransaction extends PgTransaction<AwsDataApiPgQueryResultHKT> {
    transaction<T>(transaction: (tx: AwsDataApiTransaction) => Promise<T>): Promise<T>;
}
interface AwsDataApiPgQueryResultHKT extends QueryResultHKT {
    type: ExecuteStatementCommandOutput;
}

interface PgDriverOptions {
    logger?: Logger;
    database: string;
    resourceArn: string;
    secretArn: string;
}
declare class AwsDataApiDriver {
    private client;
    private dialect;
    private options;
    constructor(client: AwsDataApiClient, dialect: PgDialect, options: PgDriverOptions);
    createSession(): AwsDataApiSession;
}
interface DrizzleConfig {
    logger?: boolean | Logger;
    database: string;
    resourceArn: string;
    secretArn: string;
}
type AwsDataApiPgDatabase = PgDatabase<AwsDataApiPgQueryResultHKT>;
declare class AwsPgDialect extends PgDialect {
    escapeName(name: string): string;
    escapeParam(num: number): string;
}
declare function drizzle(client: AwsDataApiClient, config: DrizzleConfig): AwsDataApiPgDatabase;

export { AwsDataApiDriver as A, DrizzleConfig as D, PgDriverOptions as P, AwsDataApiPgDatabase as a, AwsPgDialect as b, AwsDataApiClient as c, drizzle as d, AwsDataApiPreparedQuery as e, AwsDataApiSessionOptions as f, AwsDataApiSession as g, AwsDataApiTransaction as h, AwsDataApiPgQueryResultHKT as i };
