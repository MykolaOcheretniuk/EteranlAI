import { L as Logger } from './logger.d-37185354.js';
import { P as PreparedQueryConfig, a as PreparedQuery, S as SelectedFieldsOrdered, b as PgSession, c as PgDialect, d as PgTransactionConfig, e as PgTransaction, Q as QueryResultHKT, f as PgDatabase } from './db.d-266cc4bc.js';
import { Pool, PoolClient, Client, QueryResult, QueryResultRow } from '@neondatabase/serverless';
import { y as Query, aj as Assume } from './column.d-8b137277.js';

type NeonClient = Pool | PoolClient | Client;
declare class NeonPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private logger;
    private fields;
    private rawQuery;
    private query;
    constructor(client: NeonClient, queryString: string, params: unknown[], logger: Logger, fields: SelectedFieldsOrdered | undefined, name: string | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
    values(placeholderValues?: Record<string, unknown> | undefined): Promise<T['values']>;
}
interface NeonSessionOptions {
    logger?: Logger;
}
declare class NeonSession extends PgSession<NeonQueryResultHKT> {
    private client;
    private options;
    private logger;
    constructor(client: NeonClient, dialect: PgDialect, options?: NeonSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectedFieldsOrdered | undefined, name: string | undefined): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<QueryResult>;
    queryObjects<T extends QueryResultRow>(query: string, params: unknown[]): Promise<QueryResult<T>>;
    transaction<T>(transaction: (tx: NeonTransaction) => Promise<T>, config?: PgTransactionConfig): Promise<T>;
}
declare class NeonTransaction extends PgTransaction<NeonQueryResultHKT> {
    transaction<T>(transaction: (tx: NeonTransaction) => Promise<T>): Promise<T>;
}
interface NeonQueryResultHKT extends QueryResultHKT {
    type: QueryResult<Assume<this['row'], QueryResultRow>>;
}

interface NeonDriverOptions {
    logger?: Logger;
}
declare class NeonDriver {
    private client;
    private dialect;
    private options;
    constructor(client: NeonClient, dialect: PgDialect, options?: NeonDriverOptions);
    createSession(): NeonSession;
    initMappers(): void;
}
interface DrizzleConfig {
    logger?: boolean | Logger;
}
type NeonDatabase = PgDatabase<NeonQueryResultHKT>;
declare function drizzle(client: NeonClient, config?: DrizzleConfig): NeonDatabase;

export { DrizzleConfig as D, NeonDriverOptions as N, NeonDriver as a, NeonDatabase as b, NeonClient as c, drizzle as d, NeonPreparedQuery as e, NeonSessionOptions as f, NeonSession as g, NeonTransaction as h, NeonQueryResultHKT as i };
