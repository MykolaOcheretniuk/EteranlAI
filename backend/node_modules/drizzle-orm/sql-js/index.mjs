import{N as e,D as t}from"../logger-2598bf05.mjs";import{S as s,a as r,P as i,B as n,b as o}from"../session-b977ce56.mjs";import{s as a,k as u}from"../index-b71998f1.mjs";import{m as l}from"../utils-e6870670.mjs";import"../query-builder-2fcde2f0.mjs";class h extends s{constructor(t,s,r={}){super(s),this.client=t,this.logger=r.logger??new e}prepareQuery(e,t){const s=this.client.prepare(e.sql);return new g(s,e.sql,e.params,this.logger,t)}prepareOneTimeQuery(e,t){const s=this.client.prepare(e.sql);return new g(s,e.sql,e.params,this.logger,t,!0)}transaction(e,t={}){const s=new c(this.dialect,this);this.run(a.raw("begin"+(t.behavior?` ${t.behavior}`:"")));try{const t=e(s);return this.run(a`commit`),t}catch(e){throw this.run(a`rollback`),e}}}class c extends r{transaction(e){const t=`sp${this.nestedIndex+1}`,s=new c(this.dialect,this.session,this.nestedIndex+1);s.run(a.raw(`savepoint ${t}`));try{const r=e(s);return s.run(a.raw(`release savepoint ${t}`)),r}catch(e){throw s.run(a.raw(`rollback to savepoint ${t}`)),e}}}class g extends i{constructor(e,t,s,r,i,n=!1){super(),this.stmt=e,this.queryString=t,this.params=s,this.logger=r,this.fields=i,this.isOneTimeQuery=n}run(e){const t=u(this.params,e??{});this.logger.logQuery(this.queryString,t);const s=this.stmt.run(t);return this.isOneTimeQuery&&this.free(),s}all(e){const{fields:t,joinsNotNullableMap:s,logger:r,queryString:i,stmt:n,isOneTimeQuery:o}=this;if(t)return this.values(e).map((e=>l(t,e.map((e=>m(e))),s)));const a=u(this.params,e??{});r.logQuery(i,a),n.bind(a);const h=[];for(;n.step();)h.push(n.getAsObject());return o&&this.free(),h}get(e){const t=u(this.params,e??{});this.logger.logQuery(this.queryString,t);const{fields:s,stmt:r,isOneTimeQuery:i,joinsNotNullableMap:n}=this;if(!s){const e=r.getAsObject(t);return i&&this.free(),e}const o=r.get(t);if(i&&this.free(),o)return l(s,o.map((e=>m(e))),n)}values(e){const t=u(this.params,e??{});this.logger.logQuery(this.queryString,t),this.stmt.bind(t);const s=[];for(;this.stmt.step();)s.push(this.stmt.get());return this.isOneTimeQuery&&this.free(),s}free(){return this.stmt.free()}}function m(e){if(e instanceof Uint8Array){if("undefined"!=typeof Buffer)return e instanceof Buffer?e:Buffer.from(e);if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(e);throw new Error("TextDecoder is not available. Please provide either Buffer or TextDecoder polyfill.")}return e}function f(e,s={}){const r=new o;let i;!0===s.logger?i=new t:!1!==s.logger&&(i=s.logger);const a=new h(e,r,{logger:i});return new n(r,a)}export{g as PreparedQuery,h as SQLJsSession,c as SQLJsTransaction,f as drizzle};
//# sourceMappingURL=index.mjs.map
