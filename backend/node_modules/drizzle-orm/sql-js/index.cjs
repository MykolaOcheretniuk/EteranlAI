"use strict";var e=require("../logger-04bad527.cjs"),t=require("../session-b6939bab.cjs"),r=require("../index-59b7992d.cjs"),s=require("../utils-9d882195.cjs");require("../query-builder-2f2e8229.cjs");class i extends t.SQLiteSession{constructor(t,r,s={}){super(r),this.client=t,this.logger=s.logger??new e.NoopLogger}prepareQuery(e,t){const r=this.client.prepare(e.sql);return new o(r,e.sql,e.params,this.logger,t)}prepareOneTimeQuery(e,t){const r=this.client.prepare(e.sql);return new o(r,e.sql,e.params,this.logger,t,!0)}transaction(e,t={}){const s=new n(this.dialect,this);this.run(r.sql.raw("begin"+(t.behavior?` ${t.behavior}`:"")));try{const t=e(s);return this.run(r.sql`commit`),t}catch(e){throw this.run(r.sql`rollback`),e}}}class n extends t.SQLiteTransaction{transaction(e){const t=`sp${this.nestedIndex+1}`,s=new n(this.dialect,this.session,this.nestedIndex+1);s.run(r.sql.raw(`savepoint ${t}`));try{const i=e(s);return s.run(r.sql.raw(`release savepoint ${t}`)),i}catch(e){throw s.run(r.sql.raw(`rollback to savepoint ${t}`)),e}}}class o extends t.PreparedQuery{constructor(e,t,r,s,i,n=!1){super(),this.stmt=e,this.queryString=t,this.params=r,this.logger=s,this.fields=i,this.isOneTimeQuery=n}run(e){const t=r.fillPlaceholders(this.params,e??{});this.logger.logQuery(this.queryString,t);const s=this.stmt.run(t);return this.isOneTimeQuery&&this.free(),s}all(e){const{fields:t,joinsNotNullableMap:i,logger:n,queryString:o,stmt:a,isOneTimeQuery:u}=this;if(t)return this.values(e).map((e=>s.mapResultRow(t,e.map((e=>l(e))),i)));const c=r.fillPlaceholders(this.params,e??{});n.logQuery(o,c),a.bind(c);const h=[];for(;a.step();)h.push(a.getAsObject());return u&&this.free(),h}get(e){const t=r.fillPlaceholders(this.params,e??{});this.logger.logQuery(this.queryString,t);const{fields:i,stmt:n,isOneTimeQuery:o,joinsNotNullableMap:a}=this;if(!i){const e=n.getAsObject(t);return o&&this.free(),e}const u=n.get(t);if(o&&this.free(),u)return s.mapResultRow(i,u.map((e=>l(e))),a)}values(e){const t=r.fillPlaceholders(this.params,e??{});this.logger.logQuery(this.queryString,t),this.stmt.bind(t);const s=[];for(;this.stmt.step();)s.push(this.stmt.get());return this.isOneTimeQuery&&this.free(),s}free(){return this.stmt.free()}}function l(e){if(e instanceof Uint8Array){if("undefined"!=typeof Buffer)return e instanceof Buffer?e:Buffer.from(e);if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(e);throw new Error("TextDecoder is not available. Please provide either Buffer or TextDecoder polyfill.")}return e}exports.PreparedQuery=o,exports.SQLJsSession=i,exports.SQLJsTransaction=n,exports.drizzle=function(r,s={}){const n=new t.SQLiteSyncDialect;let o;!0===s.logger?o=new e.DefaultLogger:!1!==s.logger&&(o=s.logger);const l=new i(r,n,{logger:o});return new t.BaseSQLiteDatabase(n,l)};
//# sourceMappingURL=index.cjs.map
