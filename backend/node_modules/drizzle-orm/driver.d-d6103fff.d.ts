import { Sql, RowList, Row, TransactionSql } from 'postgres';
import { L as Logger } from './logger.d-37185354.js';
import { P as PreparedQueryConfig, a as PreparedQuery, S as SelectedFieldsOrdered, b as PgSession, c as PgDialect, d as PgTransactionConfig, e as PgTransaction, Q as QueryResultHKT, f as PgDatabase } from './db.d-266cc4bc.js';
import { y as Query, aj as Assume } from './column.d-8b137277.js';

declare class PostgresJsPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private logger;
    private fields;
    private query;
    constructor(client: Sql, queryString: string, params: unknown[], logger: Logger, fields: SelectedFieldsOrdered | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
    values(placeholderValues?: Record<string, unknown> | undefined): Promise<T['values']>;
}
interface PostgresJsSessionOptions {
    logger?: Logger;
}
declare class PostgresJsSession<TSQL extends Sql = Sql> extends PgSession<PostgresJsQueryResultHKT> {
    client: TSQL;
    logger: Logger;
    constructor(client: TSQL, dialect: PgDialect, 
    /** @internal */
    options?: PostgresJsSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectedFieldsOrdered | undefined): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<RowList<Row[]>>;
    queryObjects<T extends Row>(query: string, params: unknown[]): Promise<RowList<T[]>>;
    transaction<T>(transaction: (tx: PostgresJsTransaction) => Promise<T>, config?: PgTransactionConfig): Promise<T>;
}
declare class PostgresJsTransaction extends PgTransaction<PostgresJsQueryResultHKT> {
    constructor(dialect: PgDialect, 
    /** @internal */
    session: PostgresJsSession<TransactionSql>, nestedIndex?: number);
    transaction<T>(transaction: (tx: PostgresJsTransaction) => Promise<T>): Promise<T>;
}
interface PostgresJsQueryResultHKT extends QueryResultHKT {
    type: RowList<Assume<this['row'], Row>[]>;
}

interface DrizzleConfig {
    logger?: boolean | Logger;
}
type PostgresJsDatabase = PgDatabase<PostgresJsQueryResultHKT>;
declare function drizzle(client: Sql, config?: DrizzleConfig): PostgresJsDatabase;

export { DrizzleConfig as D, PostgresJsDatabase as P, PostgresJsPreparedQuery as a, PostgresJsSessionOptions as b, PostgresJsSession as c, drizzle as d, PostgresJsTransaction as e, PostgresJsQueryResultHKT as f };
