import { L as Logger } from './logger.d-37185354.js';
import { VercelPool, VercelClient, VercelPoolClient, QueryResult, QueryResultRow } from '@vercel/postgres';
import { P as PreparedQueryConfig, a as PreparedQuery, S as SelectedFieldsOrdered, b as PgSession, c as PgDialect, d as PgTransactionConfig, e as PgTransaction, Q as QueryResultHKT, f as PgDatabase } from './db.d-266cc4bc.js';
import { y as Query, aj as Assume } from './column.d-8b137277.js';

type VercelPgClient = VercelPool | VercelClient | VercelPoolClient;
declare class VercelPgPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private logger;
    private fields;
    private rawQuery;
    private query;
    constructor(client: VercelPgClient, queryString: string, params: unknown[], logger: Logger, fields: SelectedFieldsOrdered | undefined, name: string | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
    values(placeholderValues?: Record<string, unknown> | undefined): Promise<T['values']>;
}
interface VercelPgSessionOptions {
    logger?: Logger;
}
declare class VercelPgSession extends PgSession<VercelPgQueryResultHKT> {
    private client;
    private options;
    private logger;
    constructor(client: VercelPgClient, dialect: PgDialect, options?: VercelPgSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectedFieldsOrdered | undefined, name: string | undefined): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<QueryResult>;
    queryObjects<T extends QueryResultRow>(query: string, params: unknown[]): Promise<QueryResult<T>>;
    transaction<T>(transaction: (tx: VercelPgTransaction) => Promise<T>, config?: PgTransactionConfig | undefined): Promise<T>;
}
declare class VercelPgTransaction extends PgTransaction<VercelPgQueryResultHKT> {
    transaction<T>(transaction: (tx: VercelPgTransaction) => Promise<T>): Promise<T>;
}
interface VercelPgQueryResultHKT extends QueryResultHKT {
    type: QueryResult<Assume<this['row'], QueryResultRow>>;
}

interface VercelPgDriverOptions {
    logger?: Logger;
}
declare class VercelPgDriver {
    private client;
    private dialect;
    private options;
    constructor(client: VercelPgClient, dialect: PgDialect, options?: VercelPgDriverOptions);
    createSession(): VercelPgSession;
    initMappers(): void;
}
interface DrizzleConfig {
    logger?: boolean | Logger;
}
type VercelPgDatabase = PgDatabase<VercelPgQueryResultHKT>;
declare function drizzle(client: VercelPgClient, config?: DrizzleConfig): VercelPgDatabase;

export { DrizzleConfig as D, VercelPgDatabase as V, VercelPgDriverOptions as a, VercelPgDriver as b, VercelPgClient as c, drizzle as d, VercelPgPreparedQuery as e, VercelPgSessionOptions as f, VercelPgSession as g, VercelPgTransaction as h, VercelPgQueryResultHKT as i };
