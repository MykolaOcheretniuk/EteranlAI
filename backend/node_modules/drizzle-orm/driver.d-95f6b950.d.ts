import { Connection, Transaction, ExecutedQuery } from '@planetscale/database';
import { L as Logger } from './logger.d-37185354.js';
import { ae as PreparedQueryConfig, ah as PreparedQuery, a1 as SelectedFieldsOrdered, aj as MySqlSession, o as MySqlDialect, ak as MySqlTransaction, ac as QueryResultHKT, af as PreparedQueryHKT, n as MySqlDatabase } from './select.types.d-ffd2e526.js';
import { y as Query, S as SQL, aj as Assume } from './column.d-8b137277.js';

type PlanetScaleConnection = Connection;
declare class PlanetScalePreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private queryString;
    private params;
    private logger;
    private fields;
    private rawQuery;
    private query;
    constructor(client: PlanetScaleConnection | Transaction, queryString: string, params: unknown[], logger: Logger, fields: SelectedFieldsOrdered | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    iterator(_placeholderValues?: Record<string, unknown>): AsyncGenerator<T['iterator']>;
}
interface PlanetscaleSessionOptions {
    logger?: Logger;
}
declare class PlanetscaleSession extends MySqlSession<PlanetscaleQueryResultHKT, PlanetScalePreparedQueryHKT> {
    private baseClient;
    private options;
    private logger;
    private client;
    constructor(baseClient: PlanetScaleConnection, dialect: MySqlDialect, tx: Transaction | undefined, options?: PlanetscaleSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectedFieldsOrdered | undefined): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<ExecutedQuery>;
    queryObjects(query: string, params: unknown[]): Promise<ExecutedQuery>;
    all<T = unknown>(query: SQL<unknown>): Promise<T[]>;
    transaction<T>(transaction: (tx: PlanetScaleTransaction) => Promise<T>): Promise<T>;
}
declare class PlanetScaleTransaction extends MySqlTransaction<PlanetscaleQueryResultHKT, PlanetScalePreparedQueryHKT> {
    transaction<T>(transaction: (tx: PlanetScaleTransaction) => Promise<T>): Promise<T>;
}
interface PlanetscaleQueryResultHKT extends QueryResultHKT {
    type: ExecutedQuery;
}
interface PlanetScalePreparedQueryHKT extends PreparedQueryHKT {
    type: PlanetScalePreparedQuery<Assume<this['config'], PreparedQueryConfig>>;
}

interface PlanetscaleSDriverOptions {
    logger?: Logger;
}
declare class PlanetscaleDriver {
    private client;
    private dialect;
    private options;
    constructor(client: Connection, dialect: MySqlDialect, options?: PlanetscaleSDriverOptions);
    createSession(): PlanetscaleSession;
}
interface DrizzleConfig {
    logger?: boolean | Logger;
}
type PlanetScaleDatabase = MySqlDatabase<PlanetscaleQueryResultHKT, PlanetScalePreparedQueryHKT>;
declare function drizzle(client: Connection, config?: DrizzleConfig): PlanetScaleDatabase;

export { DrizzleConfig as D, PlanetscaleSDriverOptions as P, PlanetscaleDriver as a, PlanetScaleDatabase as b, PlanetScaleConnection as c, drizzle as d, PlanetScalePreparedQuery as e, PlanetscaleSessionOptions as f, PlanetscaleSession as g, PlanetScaleTransaction as h, PlanetscaleQueryResultHKT as i, PlanetScalePreparedQueryHKT as j };
