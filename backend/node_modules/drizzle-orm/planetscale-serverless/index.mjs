import{N as e,D as t}from"../logger-2598bf05.mjs";import{P as s,t as r,u as i,g as n,h as a}from"../session-8a621f09.mjs";import{k as o,s as c}from"../index-b71998f1.mjs";import{m as l}from"../utils-e6870670.mjs";import"../query-promise-a65edd44.mjs";import"../column-builder-592f0191.mjs";import"../query-builder-2fcde2f0.mjs";class u extends s{constructor(e,t,s,r,i){super(),this.client=e,this.queryString=t,this.params=s,this.logger=r,this.fields=i,this.rawQuery={as:"object"},this.query={as:"array"}}async execute(e={}){const t=o(this.params,e);this.logger.logQuery(this.queryString,t);const{fields:s,client:r,queryString:i,rawQuery:n,query:a,joinsNotNullableMap:c}=this;if(!s)return r.execute(i,t,n);return r.execute(i,t,a).then((e=>e.rows.map((e=>l(s,e,c)))))}iterator(e){throw new Error("Streaming is not supported by the PlanetScale Serverless driver")}}class h extends r{constructor(t,s,r,i={}){super(s),this.baseClient=t,this.options=i,this.client=r??t,this.logger=i.logger??new e}prepareQuery(e,t){return new u(this.client,e.sql,e.params,this.logger,t)}async query(e,t){return this.logger.logQuery(e,t),await this.client.execute(e,t,{as:"array"})}async queryObjects(e,t){return this.client.execute(e,t,{as:"object"})}all(e){const t=this.dialect.sqlToQuery(e);return this.logger.logQuery(t.sql,t.params),this.client.execute(t.sql,t.params,{as:"object"}).then((e=>e.rows))}transaction(e){return this.baseClient.transaction((t=>{const s=new h(this.baseClient,this.dialect,t,this.options),r=new g(this.dialect,s);return e(r)}))}}class g extends i{async transaction(e){const t=`sp${this.nestedIndex+1}`,s=new g(this.dialect,this.session,this.nestedIndex+1);await s.execute(c.raw(`savepoint ${t}`));try{const r=await e(s);return await s.execute(c.raw(`release savepoint ${t}`)),r}catch(e){throw await s.execute(c.raw(`rollback to savepoint ${t}`)),e}}}class p{constructor(e,t,s={}){this.client=e,this.dialect=t,this.options=s}createSession(){return new h(this.client,this.dialect,void 0,{logger:this.options.logger})}}function m(e,s={}){const r=new a;let i;!0===s.logger?i=new t:!1!==s.logger&&(i=s.logger);const o=new p(e,r,{logger:i}).createSession();return new n(r,o)}export{u as PlanetScalePreparedQuery,g as PlanetScaleTransaction,p as PlanetscaleDriver,h as PlanetscaleSession,m as drizzle};
//# sourceMappingURL=index.mjs.map
