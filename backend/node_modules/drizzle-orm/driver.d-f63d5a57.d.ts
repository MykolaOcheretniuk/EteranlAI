import { Connection as Connection$1, Pool as Pool$1 } from 'mysql2';
import { L as Logger } from './logger.d-37185354.js';
import { ae as PreparedQueryConfig, ah as PreparedQuery, a1 as SelectedFieldsOrdered, aj as MySqlSession, o as MySqlDialect, ag as PreparedQueryKind, ai as MySqlTransactionConfig, ak as MySqlTransaction, ac as QueryResultHKT, af as PreparedQueryHKT, n as MySqlDatabase } from './select.types.d-ffd2e526.js';
import { Pool, Connection, ResultSetHeader, FieldPacket, RowDataPacket, OkPacket } from 'mysql2/promise';
import { y as Query, S as SQL, aj as Assume } from './column.d-8b137277.js';

type MySql2Client = Pool | Connection;
type MySqlRawQueryResult = [ResultSetHeader, FieldPacket[]];
type MySqlQueryResultType = RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader;
type MySqlQueryResult<T = any> = [T extends ResultSetHeader ? T : T[], FieldPacket[]];
declare class MySql2PreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private logger;
    private fields;
    private rawQuery;
    private query;
    constructor(client: MySql2Client, queryString: string, params: unknown[], logger: Logger, fields: SelectedFieldsOrdered | undefined);
    execute(placeholderValues?: Record<string, unknown>): Promise<T['execute']>;
    iterator(placeholderValues?: Record<string, unknown>): AsyncGenerator<T['execute'] extends any[] ? T['execute'][number] : T['execute']>;
}
interface MySql2SessionOptions {
    logger?: Logger;
}
declare class MySql2Session extends MySqlSession<MySql2QueryResultHKT> {
    private client;
    private options;
    private logger;
    constructor(client: MySql2Client, dialect: MySqlDialect, options?: MySql2SessionOptions);
    prepareQuery<T extends PreparedQueryConfig>(query: Query, fields: SelectedFieldsOrdered | undefined): PreparedQueryKind<MySql2PreparedQueryHKT, T>;
    all<T = unknown>(query: SQL<unknown>): Promise<T[]>;
    transaction<T>(transaction: (tx: MySql2Transaction) => Promise<T>, config?: MySqlTransactionConfig): Promise<T>;
}
declare class MySql2Transaction extends MySqlTransaction<MySql2QueryResultHKT, MySql2PreparedQueryHKT> {
    transaction<T>(transaction: (tx: MySql2Transaction) => Promise<T>): Promise<T>;
}
interface MySql2QueryResultHKT extends QueryResultHKT {
    type: MySqlRawQueryResult;
}
interface MySql2PreparedQueryHKT extends PreparedQueryHKT {
    type: MySql2PreparedQuery<Assume<this['config'], PreparedQueryConfig>>;
}

interface MySqlDriverOptions {
    logger?: Logger;
}
declare class MySql2Driver {
    private client;
    private dialect;
    private options;
    constructor(client: MySql2Client, dialect: MySqlDialect, options?: MySqlDriverOptions);
    createSession(): MySql2Session;
}
interface DrizzleConfig {
    logger?: boolean | Logger;
}

type MySql2Database = MySqlDatabase<MySql2QueryResultHKT, MySql2PreparedQueryHKT>;
declare function drizzle(client: MySql2Client | Connection$1 | Pool$1, config?: DrizzleConfig): MySql2Database;

export { DrizzleConfig as D, MySqlDriverOptions as M, MySql2Driver as a, MySql2Database as b, MySql2Client as c, drizzle as d, MySqlRawQueryResult as e, MySqlQueryResultType as f, MySqlQueryResult as g, MySql2PreparedQuery as h, MySql2SessionOptions as i, MySql2Session as j, MySql2Transaction as k, MySql2QueryResultHKT as l, MySql2PreparedQueryHKT as m };
