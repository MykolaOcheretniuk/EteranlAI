"use strict";var e=require("@neondatabase/serverless"),t=require("../logger-04bad527.cjs"),s=require("../session-ef1ef979.cjs"),r=require("../index-59b7992d.cjs"),i=require("../utils-9d882195.cjs");require("../query-promise-2c5b43ab.cjs"),require("../query-builder-2f2e8229.cjs"),require("../column-builder-b48639f3.cjs");class n extends s.PreparedQuery{constructor(e,t,s,r,i,n){super(),this.client=e,this.params=s,this.logger=r,this.fields=i,this.rawQuery={name:n,text:t},this.query={name:n,text:t,rowMode:"array"}}execute(e={}){const t=r.fillPlaceholders(this.params,e);this.logger.logQuery(this.rawQuery.text,t);const{fields:s,client:n,rawQuery:a,query:o,joinsNotNullableMap:l}=this;if(!s)return n.query(a,t);return n.query(o,t).then((e=>e.rows.map((e=>i.mapResultRow(s,e,l)))))}all(e={}){const t=r.fillPlaceholders(this.params,e);return this.logger.logQuery(this.rawQuery.text,t),this.client.query(this.rawQuery,t).then((e=>e.rows))}values(e={}){const t=r.fillPlaceholders(this.params,e);return this.logger.logQuery(this.rawQuery.text,t),this.client.query(this.query,t).then((e=>e.rows))}}class a extends s.PgSession{constructor(e,s,r={}){super(s),this.client=e,this.options=r,this.logger=r.logger??new t.NoopLogger}prepareQuery(e,t,s){return new n(this.client,e.sql,e.params,this.logger,t,s)}async query(e,t){this.logger.logQuery(e,t);return await this.client.query({rowMode:"array",text:e,values:t})}async queryObjects(e,t){return this.client.query(e,t)}async transaction(t,s={}){const i=this.client instanceof e.Pool?new a(await this.client.connect(),this.dialect,this.options):this,n=new o(this.dialect,i);await n.execute(r.sql`begin ${n.getTransactionConfigSQL(s)}`);try{const e=await t(n);return await n.execute(r.sql`commit`),e}catch(e){throw await n.execute(r.sql`rollback`),e}finally{this.client instanceof e.Pool&&i.client.release()}}}class o extends s.PgTransaction{async transaction(e){const t=`sp${this.nestedIndex+1}`,s=new o(this.dialect,this.session,this.nestedIndex+1);await s.execute(r.sql.raw(`savepoint ${t}`));try{const i=await e(s);return await s.execute(r.sql.raw(`release savepoint ${t}`)),i}catch(e){throw await s.execute(r.sql.raw(`rollback to savepoint ${t}`)),e}}}class l{constructor(e,t,s={}){this.client=e,this.dialect=t,this.options=s,this.initMappers()}createSession(){return new a(this.client,this.dialect,{logger:this.options.logger})}initMappers(){e.types.setTypeParser(e.types.builtins.TIMESTAMPTZ,(e=>e)),e.types.setTypeParser(e.types.builtins.TIMESTAMP,(e=>e)),e.types.setTypeParser(e.types.builtins.DATE,(e=>e))}}exports.NeonDriver=l,exports.NeonPreparedQuery=n,exports.NeonSession=a,exports.NeonTransaction=o,exports.drizzle=function(e,r={}){const i=new s.PgDialect;let n;!0===r.logger?n=new t.DefaultLogger:!1!==r.logger&&(n=r.logger);const a=new l(e,i,{logger:n}).createSession();return new s.PgDatabase(i,a)};
//# sourceMappingURL=index.cjs.map
