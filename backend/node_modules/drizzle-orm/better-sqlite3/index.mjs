import{N as s,D as t}from"../logger-2598bf05.mjs";import{S as r,a as e,P as i,B as n,b as o}from"../session-b977ce56.mjs";import{s as a,k as l}from"../index-b71998f1.mjs";import{m as g}from"../utils-e6870670.mjs";import"../query-builder-2fcde2f0.mjs";class h extends r{constructor(t,r,e={}){super(r),this.client=t,this.logger=e.logger??new s}prepareQuery(s,t){const r=this.client.prepare(s.sql);return new c(r,s.sql,s.params,this.logger,t)}transaction(s,t={}){const r=new u(this.dialect,this);return this.client.transaction(s)[t.behavior??"deferred"](r)}}class u extends e{transaction(s){const t=`sp${this.nestedIndex}`,r=new u(this.dialect,this.session,this.nestedIndex+1);this.session.run(a.raw(`savepoint ${t}`));try{const e=s(r);return this.session.run(a.raw(`release savepoint ${t}`)),e}catch(s){throw this.session.run(a.raw(`rollback to savepoint ${t}`)),s}}}class c extends i{constructor(s,t,r,e,i){super(),this.stmt=s,this.queryString=t,this.params=r,this.logger=e,this.fields=i}run(s){const t=l(this.params,s??{});return this.logger.logQuery(this.queryString,t),this.stmt.run(...t)}all(s){const{fields:t,joinsNotNullableMap:r,queryString:e,logger:i,stmt:n}=this;if(t)return this.values(s).map((s=>g(t,s,r)));const o=l(this.params,s??{});return i.logQuery(e,o),n.all(...o)}get(s){const t=l(this.params,s??{});this.logger.logQuery(this.queryString,t);const{fields:r,stmt:e,joinsNotNullableMap:i}=this;if(!r)return e.get(...t);const n=e.raw().get(...t);return n?g(r,n,i):void 0}values(s){const t=l(this.params,s??{});return this.logger.logQuery(this.queryString,t),this.stmt.raw().all(...t)}}function m(s,r={}){const e=new o;let i;!0===r.logger?i=new t:!1!==r.logger&&(i=r.logger);const a=new h(s,e,{logger:i});return new n(e,a)}export{h as BetterSQLiteSession,u as BetterSQLiteTransaction,c as PreparedQuery,m as drizzle};
//# sourceMappingURL=index.mjs.map
