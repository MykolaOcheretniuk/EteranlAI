import { L as Logger } from './logger.d-37185354.js';
import { P as PreparedQueryConfig, a as PreparedQuery, S as SelectedFieldsOrdered, b as PgSession, c as PgDialect, d as PgTransactionConfig, e as PgTransaction, Q as QueryResultHKT, f as PgDatabase } from './db.d-266cc4bc.js';
import pg, { PoolClient, Client, QueryResult, QueryResultRow } from 'pg';
import { y as Query, aj as Assume } from './column.d-8b137277.js';

type NodePgClient = pg.Pool | PoolClient | Client;
declare class NodePgPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private logger;
    private fields;
    private rawQuery;
    private query;
    constructor(client: NodePgClient, queryString: string, params: unknown[], logger: Logger, fields: SelectedFieldsOrdered | undefined, name: string | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
    values(placeholderValues?: Record<string, unknown> | undefined): Promise<T['values']>;
}
interface NodePgSessionOptions {
    logger?: Logger;
}
declare class NodePgSession extends PgSession<NodePgQueryResultHKT> {
    private client;
    private options;
    private logger;
    constructor(client: NodePgClient, dialect: PgDialect, options?: NodePgSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectedFieldsOrdered | undefined, name: string | undefined): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<QueryResult>;
    queryObjects<T extends QueryResultRow>(query: string, params: unknown[]): Promise<QueryResult<T>>;
    transaction<T>(transaction: (tx: NodePgTransaction) => Promise<T>, config?: PgTransactionConfig | undefined): Promise<T>;
}
declare class NodePgTransaction extends PgTransaction<NodePgQueryResultHKT> {
    transaction<T>(transaction: (tx: NodePgTransaction) => Promise<T>): Promise<T>;
}
interface NodePgQueryResultHKT extends QueryResultHKT {
    type: QueryResult<Assume<this['row'], QueryResultRow>>;
}

interface PgDriverOptions {
    logger?: Logger;
}
declare class NodePgDriver {
    private client;
    private dialect;
    private options;
    constructor(client: NodePgClient, dialect: PgDialect, options?: PgDriverOptions);
    createSession(): NodePgSession;
    initMappers(): void;
}
interface DrizzleConfig {
    logger?: boolean | Logger;
}
type NodePgDatabase = PgDatabase<NodePgQueryResultHKT>;
declare function drizzle(client: NodePgClient, config?: DrizzleConfig): NodePgDatabase;

export { DrizzleConfig as D, NodePgDriver as N, PgDriverOptions as P, NodePgDatabase as a, NodePgClient as b, NodePgPreparedQuery as c, drizzle as d, NodePgSessionOptions as e, NodePgSession as f, NodePgTransaction as g, NodePgQueryResultHKT as h };
