import{d as e}from"../index-b71998f1.mjs";import{e as g,f as h,p as f,g as p,h as ee}from"../session-c891400d.mjs";export{i as Check,C as CheckBuilder,aj as DefaultViewBuilderCore,a9 as ExtraConfigBuilder,Q as ForeignKey,O as ForeignKeyBuilder,U as Index,T as IndexBuilder,S as IndexBuilderOn,a8 as InlineForeignKeys,ao as ManualMaterializedViewBuilder,al as ManualViewBuilder,an as MaterializedViewBuilder,am as MaterializedViewBuilderCore,l as PgArray,k as PgArrayBuilder,d as PgDatabase,n as PgDate,m as PgDateBuilder,q as PgDateString,o as PgDateStringBuilder,_ as PgDelete,c as PgDialect,a0 as PgInsert,$ as PgInsertBuilder,t as PgJson,s as PgJsonBuilder,w as PgJsonb,v as PgJsonbBuilder,at as PgMaterializedView,as as PgMaterializedViewConfig,z as PgNumeric,y as PgNumericBuilder,a2 as PgRefreshMaterializedView,a5 as PgSelect,a3 as PgSelectBuilder,a4 as PgSelectQueryBuilder,a as PgSession,aa as PgTable,E as PgTime,D as PgTimeBuilder,H as PgTimestamp,G as PgTimestampBuilder,J as PgTimestampString,I as PgTimestampStringBuilder,b as PgTransaction,M as PgUUID,L as PgUUIDBuilder,a7 as PgUpdate,a6 as PgUpdateBuilder,ar as PgView,ap as PgViewBase,aq as PgViewConfig,P as PreparedQuery,Z as PrimaryKey,Y as PrimaryKeyBuilder,a1 as QueryBuilder,ak as ViewBuilder,j as check,r as date,B as decimal,R as foreignKey,af as getMaterializedViewConfig,ad as getTableConfig,ae as getViewConfig,V as index,u as json,x as jsonb,ai as makePgArray,A as numeric,ah as parsePgArray,ag as parsePgNestedArray,av as pgMaterializedView,ab as pgTable,ac as pgTableCreator,au as pgView,X as primaryKey,F as time,K as timestamp,W as uniqueIndex,N as uuid}from"../session-c891400d.mjs";import"../utils-e6870670.mjs";import"../query-promise-a65edd44.mjs";import"../query-builder-2fcde2f0.mjs";import"../column-builder-592f0191.mjs";class se extends g{build(e){return new te(e,this.config)}}class te extends h{getSQLType(){return"bigint"}mapFromDriverValue(e){return"number"==typeof e?e:Number(e)}}class ne extends g{build(e){return new re(e,this.config)}}class re extends h{getSQLType(){return"bigint"}mapFromDriverValue(e){return BigInt(e)}}function ie(e,s){return"number"===s.mode?new se(e):new ne(e)}class ue extends g{constructor(e){super(e),this.config.hasDefault=!0,this.config.notNull=!0}build(e){return new oe(e,this.config)}}class oe extends h{getSQLType(){return"bigserial"}mapFromDriverValue(e){return"number"==typeof e?e:Number(e)}}class ce extends g{constructor(e){super(e),this.config.hasDefault=!0}build(e){return new le(e,this.config)}}class le extends h{getSQLType(){return"bigserial"}mapFromDriverValue(e){return BigInt(e)}}function ge(e,{mode:s}){return"number"===s?new ue(e):new ce(e)}class me extends g{build(e){return new de(e,this.config)}}class de extends h{getSQLType(){return"boolean"}}function he(e){return new me(e)}class fe extends g{constructor(e,s){super(e),this.config.length=s.length,this.config.enumValues=s.enum??[]}build(e){return new pe(e,this.config)}}class pe extends h{constructor(){super(...arguments),this.length=this.config.length,this.enumValues=this.config.enumValues}getSQLType(){return void 0===this.length?"char":`char(${this.length})`}}function we(e,s={}){return new fe(e,s)}class ye extends g{build(e){return new be(e,this.config)}}class be extends h{getSQLType(){return"cidr"}}function xe(e){return new ye(e)}class Pe extends g{constructor(e,s,t){super(e),this.config.fieldConfig=s,this.config.customTypeParams=t}build(e){return new Te(e,this.config)}}class Te extends h{constructor(e,s){super(e,s),this.sqlName=s.customTypeParams.dataType(s.fieldConfig),this.mapTo=s.customTypeParams.toDriver,this.mapFrom=s.customTypeParams.fromDriver}getSQLType(){return this.sqlName}mapFromDriverValue(e){return"function"==typeof this.mapFrom?this.mapFrom(e):e}mapToDriverValue(e){return"function"==typeof this.mapTo?this.mapTo(e):e}}function Ve(e){return(s,t)=>new Pe(s,t,e)}class Be extends g{build(e){return new Se(e,this.config)}}class Se extends h{getSQLType(){return"double precision"}mapFromDriverValue(e){return"string"==typeof e?Number.parseFloat(e):e}}function De(e){return new Be(e)}const Qe=Symbol("isPgEnum");function ve(e){return!!e&&"function"==typeof e&&Qe in e}class Le extends g{constructor(e,s){super(e),this.config.enum=s}build(e){return new Ne(e,this.config)}}class Ne extends h{constructor(e,s){super(e,s),this.enum=this.config.enum,this.enumValues=this.config.enum.enumValues,this.enum=s.enum}getSQLType(){return this.enum.enumName}}function Fe(e,s){const t=Object.assign((e=>new Le(e,t)),{enumName:e,enumValues:s,[Qe]:!0});return t}class Ce extends g{build(e){return new Ie(e,this.config)}}class Ie extends h{getSQLType(){return"inet"}}function je(e){return new Ce(e)}class Me extends g{build(e){return new ze(e,this.config)}}class ze extends h{getSQLType(){return"integer"}mapFromDriverValue(e){return"string"==typeof e?Number.parseInt(e):e}}function Ke(e){return new Me(e)}class qe extends g{constructor(e,s){super(e),this.config.intervalConfig=s}build(e){return new Ue(e,this.config)}}class Ue extends h{constructor(){super(...arguments),this.fields=this.config.intervalConfig.fields,this.precision=this.config.intervalConfig.precision}getSQLType(){return`interval${this.fields?` ${this.fields}`:""}${this.precision?`(${this.precision})`:""}`}}function $e(e,s={}){return new qe(e,s)}class ke extends g{build(e){return new Ae(e,this.config)}}class Ae extends h{getSQLType(){return"macaddr"}}function Je(e){return new ke(e)}class Ee extends g{build(e){return new Oe(e,this.config)}}class Oe extends h{getSQLType(){return"macaddr8"}}function Re(e){return new Ee(e)}class Ye extends g{constructor(e,s){super(e),this.config.length=s}build(e){return new Ge(e,this.config)}}class Ge extends h{constructor(e,s){super(e,s),this.mapFromDriverValue=e=>"string"==typeof e?Number.parseFloat(e):e}getSQLType(){return"real"}}function He(e){return new Ye(e)}class We extends g{constructor(e){super(e),this.config.hasDefault=!0,this.config.notNull=!0}build(e){return new Xe(e,this.config)}}class Xe extends h{getSQLType(){return"serial"}}function Ze(e){return new We(e)}class _e extends g{build(e){return new es(e,this.config)}}class es extends h{constructor(){super(...arguments),this.mapFromDriverValue=e=>"string"==typeof e?Number(e):e}getSQLType(){return"smallint"}}function ss(e){return new _e(e)}class ts extends g{constructor(e){super(e),this.config.hasDefault=!0,this.config.notNull=!0}build(e){return new ns(e,this.config)}}class ns extends h{getSQLType(){return"serial"}}function rs(e){return new ts(e)}class is extends g{constructor(e,s){super(e),this.config.enumValues=s.enum??[]}build(e){return new us(e,this.config)}}class us extends h{constructor(){super(...arguments),this.enumValues=this.config.enumValues}getSQLType(){return"text"}}function os(e,s={}){return new is(e,s)}class cs extends g{constructor(e,s){super(e),this.config.length=s.length,this.config.enumValues=s.enum??[]}build(e){return new ls(e,this.config)}}class ls extends h{constructor(){super(...arguments),this.length=this.config.length,this.enumValues=this.config.enumValues}getSQLType(){return void 0===this.length?"varchar":`varchar(${this.length})`}}function gs(e,s={}){return new cs(e,s)}function ms(s,t){return new Proxy(s,new e(t,!1))}class ds{constructor(e){this.schemaName=e,this.table=(e,s,t)=>f(e,s,t,this.schemaName),this.view=(e,s)=>p(e,s,this.schemaName),this.materializedView=(e,s)=>ee(e,s,this.schemaName)}}function hs(e){return e instanceof ds}function fs(e){if("public"===e)throw new Error("You can't specify 'public' as schema name. Postgres is using public schema by default. If you want to use 'public' schema, just use pgTable() instead of creating a schema");return new ds(e)}export{te as PgBigInt53,se as PgBigInt53Builder,re as PgBigInt64,ne as PgBigInt64Builder,oe as PgBigSerial53,ue as PgBigSerial53Builder,le as PgBigSerial64,ce as PgBigSerial64Builder,de as PgBoolean,me as PgBooleanBuilder,pe as PgChar,fe as PgCharBuilder,be as PgCidr,ye as PgCidrBuilder,h as PgColumn,g as PgColumnBuilder,Te as PgCustomColumn,Pe as PgCustomColumnBuilder,Se as PgDoublePrecision,Be as PgDoublePrecisionBuilder,Ne as PgEnumColumn,Le as PgEnumColumnBuilder,Ie as PgInet,Ce as PgInetBuilder,ze as PgInteger,Me as PgIntegerBuilder,Ue as PgInterval,qe as PgIntervalBuilder,Ae as PgMacaddr,Oe as PgMacaddr8,Ee as PgMacaddr8Builder,ke as PgMacaddrBuilder,Ge as PgReal,Ye as PgRealBuilder,ds as PgSchema,Xe as PgSerial,We as PgSerialBuilder,es as PgSmallInt,_e as PgSmallIntBuilder,ns as PgSmallSerial,ts as PgSmallSerialBuilder,us as PgText,is as PgTextBuilder,ls as PgVarchar,cs as PgVarcharBuilder,ms as alias,ie as bigint,ge as bigserial,he as boolean,we as char,xe as cidr,Ve as customType,De as doublePrecision,je as inet,Ke as integer,$e as interval,ve as isPgEnum,hs as isPgSchema,Je as macaddr,Re as macaddr8,Fe as pgEnum,ee as pgMaterializedViewWithSchema,fs as pgSchema,f as pgTableWithSchema,p as pgViewWithSchema,He as real,Ze as serial,ss as smallint,rs as smallserial,os as text,gs as varchar};
//# sourceMappingURL=index.mjs.map
