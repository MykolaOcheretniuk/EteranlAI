{
  "service": {
    "service": "EternalAI",
    "serviceObject": {
      "name": "EternalAI"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "profile": "myawff",
      "region": "us-east-1",
      "httpApi": {
        "cors": true,
        "authorizers": {
          "customAuthorizer": {
            "type": "request",
            "functionName": "AuthorizeUser",
            "identitySource": "$request.header.Authorization"
          }
        }
      },
      "environment": {
        "ETERNAL_AI_DB_USERNAME": "EternalAIDBAdmin",
        "ETERNAL_AI_DB_PASSWORD": "4fd2fba1-acff-4662-aafb-772833603edc",
        "ETERNAL_AI_DB_ENDPOINT": "eternalai-dev-eternalaidb-53aeyoitaeus.cy9ezvsfpxys.us-east-1.rds.amazonaws.com",
        "DB_PORT": "3306",
        "ETERNAL_AI_DB_NAME": "EternalAiDb",
        "ACCESS_TOKEN_SECRET": "9edfe531-2841-41e7-98d7-4217dfed4ee1",
        "CHAT_GPT_API_KEY": "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",
        "CHAT_GPT_URL": "https://api.openai.com/v1/chat/completions"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "SignUpOrLoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/EternalAI-dev-SignUpOrLogin"
            }
          },
          "AuthorizeUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/EternalAI-dev-AuthorizeUser"
            }
          },
          "ChoseIndividualLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/EternalAI-dev-ChoseIndividual"
            }
          },
          "GetAnswerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/EternalAI-dev-GetAnswer"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "EternalAI",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/EternalAI-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/EternalAI-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "EternalAI",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "SignUpOrLoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/EternalAI/dev/1683546235233-2023-05-08T11:43:55.233Z/EternalAI.zip"
              },
              "Handler": "src/lambdas/users/signUp.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "EternalAI-dev-SignUpOrLogin",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ETERNAL_AI_DB_USERNAME": "EternalAIDBAdmin",
                  "ETERNAL_AI_DB_PASSWORD": "4fd2fba1-acff-4662-aafb-772833603edc",
                  "ETERNAL_AI_DB_ENDPOINT": "eternalai-dev-eternalaidb-53aeyoitaeus.cy9ezvsfpxys.us-east-1.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "ETERNAL_AI_DB_NAME": "EternalAiDb",
                  "ACCESS_TOKEN_SECRET": "9edfe531-2841-41e7-98d7-4217dfed4ee1",
                  "CHAT_GPT_API_KEY": "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",
                  "CHAT_GPT_URL": "https://api.openai.com/v1/chat/completions"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignUpOrLoginLogGroup"
            ]
          },
          "AuthorizeUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/EternalAI/dev/1683546235233-2023-05-08T11:43:55.233Z/EternalAI.zip"
              },
              "Handler": "src/lambdas/authorizer.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "EternalAI-dev-AuthorizeUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ETERNAL_AI_DB_USERNAME": "EternalAIDBAdmin",
                  "ETERNAL_AI_DB_PASSWORD": "4fd2fba1-acff-4662-aafb-772833603edc",
                  "ETERNAL_AI_DB_ENDPOINT": "eternalai-dev-eternalaidb-53aeyoitaeus.cy9ezvsfpxys.us-east-1.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "ETERNAL_AI_DB_NAME": "EternalAiDb",
                  "ACCESS_TOKEN_SECRET": "9edfe531-2841-41e7-98d7-4217dfed4ee1",
                  "CHAT_GPT_API_KEY": "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",
                  "CHAT_GPT_URL": "https://api.openai.com/v1/chat/completions"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthorizeUserLogGroup"
            ]
          },
          "ChoseIndividualLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/EternalAI/dev/1683546235233-2023-05-08T11:43:55.233Z/EternalAI.zip"
              },
              "Handler": "src/lambdas/users/choseIndividual.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "EternalAI-dev-ChoseIndividual",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ETERNAL_AI_DB_USERNAME": "EternalAIDBAdmin",
                  "ETERNAL_AI_DB_PASSWORD": "4fd2fba1-acff-4662-aafb-772833603edc",
                  "ETERNAL_AI_DB_ENDPOINT": "eternalai-dev-eternalaidb-53aeyoitaeus.cy9ezvsfpxys.us-east-1.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "ETERNAL_AI_DB_NAME": "EternalAiDb",
                  "ACCESS_TOKEN_SECRET": "9edfe531-2841-41e7-98d7-4217dfed4ee1",
                  "CHAT_GPT_API_KEY": "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",
                  "CHAT_GPT_URL": "https://api.openai.com/v1/chat/completions"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ChoseIndividualLogGroup"
            ]
          },
          "GetAnswerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/EternalAI/dev/1683546235233-2023-05-08T11:43:55.233Z/EternalAI.zip"
              },
              "Handler": "src/lambdas/users/getAnswer.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "EternalAI-dev-GetAnswer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ETERNAL_AI_DB_USERNAME": "EternalAIDBAdmin",
                  "ETERNAL_AI_DB_PASSWORD": "4fd2fba1-acff-4662-aafb-772833603edc",
                  "ETERNAL_AI_DB_ENDPOINT": "eternalai-dev-eternalaidb-53aeyoitaeus.cy9ezvsfpxys.us-east-1.rds.amazonaws.com",
                  "DB_PORT": "3306",
                  "ETERNAL_AI_DB_NAME": "EternalAiDb",
                  "ACCESS_TOKEN_SECRET": "9edfe531-2841-41e7-98d7-4217dfed4ee1",
                  "CHAT_GPT_API_KEY": "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",
                  "CHAT_GPT_URL": "https://api.openai.com/v1/chat/completions"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAnswerLogGroup"
            ]
          },
          "SignUpOrLoginLambdaVersionc8mPWJs33V3dAUSymVcm0VDlqsV5jHXZACcDLqvvpc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignUpOrLoginLambdaFunction"
              },
              "CodeSha256": "dt+v0eb01CuiQ8BLa7yueLj3oi1mrvrNVLdR8fWHC0A="
            }
          },
          "AuthorizeUserLambdaVersionxgDpG65hPC4axFcRZBfqmHvJ1njzbqEaqY1gUH7EwQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthorizeUserLambdaFunction"
              },
              "CodeSha256": "dt+v0eb01CuiQ8BLa7yueLj3oi1mrvrNVLdR8fWHC0A="
            }
          },
          "ChoseIndividualLambdaVersionkKHHpAax6rz5gxXu7TMu1jF3ylpr8901uLviFIQ26A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChoseIndividualLambdaFunction"
              },
              "CodeSha256": "dt+v0eb01CuiQ8BLa7yueLj3oi1mrvrNVLdR8fWHC0A="
            }
          },
          "GetAnswerLambdaVersionvvIn9WZGiiQ2pgsgZgPzfspibnMJ5Od2eDtMjWY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAnswerLambdaFunction"
              },
              "CodeSha256": "dt+v0eb01CuiQ8BLa7yueLj3oi1mrvrNVLdR8fWHC0A="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-EternalAI",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "POST"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "CustomAuthorizerLambdaAuthorizerPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthorizeUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiAuthorizerCustomAuthorizer": {
            "Type": "AWS::ApiGatewayV2::Authorizer",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "Name": "customAuthorizer",
              "IdentitySource": [
                "$request.header.Authorization"
              ],
              "AuthorizerType": "REQUEST",
              "AuthorizerPayloadFormatVersion": "2.0",
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CustomAuthorizerLambdaAuthorizerPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "SignUpOrLoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignUpOrLoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSignUpOrLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SignUpOrLoginLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUserActionVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /user/{action}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSignUpOrLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSignUpOrLogin"
          },
          "ChoseIndividualLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChoseIndividualLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationChoseIndividual": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ChoseIndividualLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUserChoseindividual": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /user/choseIndividual",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationChoseIndividual"
                    }
                  ]
                ]
              },
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerCustomAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationChoseIndividual"
          },
          "GetAnswerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAnswerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAnswer": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAnswerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostGetanswer": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /getAnswer",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAnswer"
                    }
                  ]
                ]
              },
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerCustomAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationGetAnswer"
          },
          "EternalAiDb": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
              "Engine": "MySQL",
              "DBName": "EternalAiDb",
              "DBInstanceClass": "db.t3.micro",
              "MasterUsername": "EternalAIDBAdmin",
              "MasterUserPassword": "4fd2fba1-acff-4662-aafb-772833603edc",
              "AllocatedStorage": 5,
              "BackupRetentionPeriod": 0,
              "PubliclyAccessible": true
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-EternalAI-dev-ServerlessDeploymentBucketName"
            }
          },
          "SignUpOrLoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignUpOrLoginLambdaVersionc8mPWJs33V3dAUSymVcm0VDlqsV5jHXZACcDLqvvpc"
            },
            "Export": {
              "Name": "sls-EternalAI-dev-SignUpOrLoginLambdaFunctionQualifiedArn"
            }
          },
          "AuthorizeUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthorizeUserLambdaVersionxgDpG65hPC4axFcRZBfqmHvJ1njzbqEaqY1gUH7EwQ"
            },
            "Export": {
              "Name": "sls-EternalAI-dev-AuthorizeUserLambdaFunctionQualifiedArn"
            }
          },
          "ChoseIndividualLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChoseIndividualLambdaVersionkKHHpAax6rz5gxXu7TMu1jF3ylpr8901uLviFIQ26A"
            },
            "Export": {
              "Name": "sls-EternalAI-dev-ChoseIndividualLambdaFunctionQualifiedArn"
            }
          },
          "GetAnswerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAnswerLambdaVersionvvIn9WZGiiQ2pgsgZgPzfspibnMJ5Od2eDtMjWY"
            },
            "Export": {
              "Name": "sls-EternalAI-dev-GetAnswerLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-EternalAI-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-EternalAI-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-esbuild"
    ],
    "pluginsData": {},
    "functions": {
      "SignUpOrLogin": {
        "handler": "src/lambdas/users/signUp.handler",
        "events": [
          {
            "httpApi": {
              "path": "/user/{action}",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/user/{action}"
          }
        ],
        "name": "EternalAI-dev-SignUpOrLogin",
        "package": {
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "SignUpOrLoginLambdaVersionc8mPWJs33V3dAUSymVcm0VDlqsV5jHXZACcDLqvvpc"
      },
      "AuthorizeUser": {
        "handler": "src/lambdas/authorizer.handler",
        "events": [],
        "name": "EternalAI-dev-AuthorizeUser",
        "package": {
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "AuthorizeUserLambdaVersionxgDpG65hPC4axFcRZBfqmHvJ1njzbqEaqY1gUH7EwQ"
      },
      "ChoseIndividual": {
        "handler": "src/lambdas/users/choseIndividual.handler",
        "events": [
          {
            "httpApi": {
              "path": "/user/choseIndividual",
              "method": "POST",
              "authorizer": {
                "name": "customAuthorizer"
              }
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/user/choseIndividual"
          }
        ],
        "name": "EternalAI-dev-ChoseIndividual",
        "package": {
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ChoseIndividualLambdaVersionkKHHpAax6rz5gxXu7TMu1jF3ylpr8901uLviFIQ26A"
      },
      "GetAnswer": {
        "handler": "src/lambdas/users/getAnswer.handler",
        "events": [
          {
            "httpApi": {
              "path": "/getAnswer",
              "method": "POST",
              "authorizer": {
                "name": "customAuthorizer"
              }
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/getAnswer"
          }
        ],
        "name": "EternalAI-dev-GetAnswer",
        "package": {
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetAnswerLambdaVersionvvIn9WZGiiQ2pgsgZgPzfspibnMJ5Od2eDtMjWY"
      }
    },
    "resources": {
      "Resources": {
        "EternalAiDb": {
          "Type": "AWS::RDS::DBInstance",
          "Properties": {
            "Engine": "MySQL",
            "DBName": "EternalAiDb",
            "DBInstanceClass": "db.t3.micro",
            "MasterUsername": "EternalAIDBAdmin",
            "MasterUserPassword": "4fd2fba1-acff-4662-aafb-772833603edc",
            "AllocatedStorage": 5,
            "BackupRetentionPeriod": 0,
            "PubliclyAccessible": true
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "EternalAI",
      "frameworkVersion": "3",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/EternalAI/dev/1683546235233-2023-05-08T11:43:55.233Z",
    "artifact": "EternalAI.zip"
  }
}